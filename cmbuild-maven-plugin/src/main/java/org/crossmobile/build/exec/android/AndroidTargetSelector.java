/*
 * (c) 2023 by Panayotis Katsaloulis
 *
 * SPDX-License-Identifier: LGPL-3.0-only
 */

package org.crossmobile.build.exec.android;

import org.crossmobile.build.exec.android.ConnectedAndroidDispatcher.AListener;
import org.crossmobile.utils.Commander;
import org.crossmobile.utils.Log;

import javax.swing.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.prefs.Preferences;

public class AndroidTargetSelector extends JDialog implements AListener {

    private static final String LAST_DEVICE = "last.selected.device";
    private final File emulator;

    private List<AndroidDevice> devicelist;
    private String last_selected = Preferences.userNodeForPackage(AndroidTargetSelector.class).get(LAST_DEVICE, null);
    private boolean ignoreSelectEvent;
    private Consumer<String> callback;
    private boolean onlyTheFirstTime = true;

    public static AListener init(Consumer<String> callback, File emulator) {
        return new AndroidTargetSelector(callback, emulator);
    }

    @SuppressWarnings("OverridableMethodCallInConstructor")
    private AndroidTargetSelector(Consumer<String> callback, File emulator) {
        super((JDialog) null, true);
        this.emulator = emulator;
        initComponents();
        if (emulator == null || !emulator.isFile() || getEmulators().isEmpty())
            emuLaunchB.setVisible(false);

        this.callback = callback;

        setLocationRelativeTo(null);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                deviceInfo(null);
            }
        });
        deviceL.addListSelectionListener(e -> {
            int index = deviceL.getSelectedIndex();
            okB.setEnabled(index >= 0);
            if (!ignoreSelectEvent && index >= 0 && devicelist.size() > index)
                Preferences.userNodeForPackage(AndroidTargetSelector.class).put(LAST_DEVICE, last_selected = devicelist.get(index).deviceID);
            ignoreSelectEvent = false;
        });
    }

    private void deviceInfo(String device) {
        setVisible(false);
        if (callback != null)
            synchronized (this) {
                if (device != null)
                    Preferences.userNodeForPackage(AndroidTargetSelector.class).put(LAST_DEVICE, device);
                SwingUtilities.invokeLater(() -> setVisible(false));
                callback.accept(device);
                callback = null;
                notifyAll();
            }
    }

    @Override
    public void onDeviceStateChange(List<AndroidDevice> devices) {
        if (onlyTheFirstTime && devices.size() == 1 && devices.get(0).deviceID.equals(last_selected)) {
            deviceInfo(last_selected);
            return;
        }

        onlyTheFirstTime = false;
        devicelist = devices;
        ignoreSelectEvent = true;
        deviceL.setModel(new AbstractListModel<String>() {
            @Override
            public int getSize() {
                return devicelist.size();
            }

            @Override
            public String getElementAt(int index) {
                return devicelist.get(index).toString();
            }
        });
        SwingUtilities.invokeLater(() -> {
            toFront();
            setVisible(true);
        });
        if (devices.size() >= 1) {
            okB.setEnabled(true);
            ignoreSelectEvent = true;
            int selected = getLastSelectedIndex(devices);
            deviceL.setSelectedIndex(selected < 0 ? 0 : selected);
        }
    }

    private int getLastSelectedIndex(List<AndroidDevice> devices) {
        for (int i = 0; i < devices.size(); i++)
            if (devices.get(i).deviceID.equals(last_selected))
                return i;
        return -1;
    }

    private List<String> getEmulators() {
        List<String> devices = new ArrayList<>();
        Commander c = new Commander(emulator.getAbsolutePath(), "-list-avds");
        c.setCurrentDir(emulator.getParentFile());
        c.setOutListener(s -> {
            if (!s.trim().isEmpty())
                devices.add(s);
        });
        c.setErrListener((Consumer<String>) Log::error);
        c.exec();
        c.waitFor();
        return devices;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        deviceL = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        emuLaunchB = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        okB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Android Target");
        setPreferredSize(new java.awt.Dimension(450, 260));
        setResizable(false);

        jLabel1.setFont(jLabel1.getFont().deriveFont((jLabel1.getFont().getStyle() | java.awt.Font.ITALIC)));
        jLabel1.setText("Please select deployment target");
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 4, 4, 1));
        getContentPane().add(jLabel1, java.awt.BorderLayout.PAGE_START);

        deviceL.setFont(deviceL.getFont().deriveFont(deviceL.getFont().getSize() + 1f));
        deviceL.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        deviceL.setFixedCellHeight(32);
        deviceL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deviceLMouseClicked(evt);
            }
        });
        deviceL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                deviceLKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(deviceL);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        emuLaunchB.setText("Launch emulator");
        emuLaunchB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emuLaunchBActionPerformed(evt);
            }
        });
        jPanel2.add(emuLaunchB);

        jPanel1.add(jPanel2, java.awt.BorderLayout.WEST);

        okB.setText("Accept");
        okB.setEnabled(false);
        okB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBActionPerformed(evt);
            }
        });
        jPanel3.add(okB);

        jPanel1.add(jPanel3, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBActionPerformed
        setVisible(false);
        int index = deviceL.getSelectedIndex();
        if (devicelist != null || index >= 0 || index < devicelist.size())
            deviceInfo(devicelist.get(index).deviceID);
        else
            deviceInfo(null);
    }//GEN-LAST:event_okBActionPerformed

    private void deviceLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deviceLKeyTyped
        if (evt.getKeyChar() == '\n' && deviceL.getSelectedIndex() >= 0)
            okBActionPerformed(null);
    }//GEN-LAST:event_deviceLKeyTyped

    private void deviceLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deviceLMouseClicked
        if (evt.getClickCount() == 2)
            okBActionPerformed(null);
    }//GEN-LAST:event_deviceLMouseClicked

    private void emuLaunchBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emuLaunchBActionPerformed
        List<String> devices = getEmulators();
        if (devices.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No installed emulators found", "Launch emulator", JOptionPane.ERROR_MESSAGE);
        } else {
            JPanel options = new JPanel();
            options.setLayout(new BoxLayout(options, BoxLayout.Y_AXIS));
            ButtonGroup group = new ButtonGroup();
            for (String device : devices) {
                JRadioButton radioButton = new JRadioButton(device.replace('_', ' '));
                group.add(radioButton);
                options.add(radioButton);
                radioButton.setActionCommand(device);
            }
            int result = JOptionPane.showConfirmDialog(this, options, "Launch emulator", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.OK_OPTION && group.getSelection() != null) {
                Commander launch = new Commander(emulator.getAbsolutePath(), "-avd", group.getSelection().getActionCommand());
                launch.setCurrentDir(emulator.getParentFile());
                launch.setDetachable(true);
                launch.setDebug(true);
                launch.exec();
            }
        }
    }//GEN-LAST:event_emuLaunchBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> deviceL;
    private javax.swing.JButton emuLaunchB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton okB;
    // End of variables declaration//GEN-END:variables

}
